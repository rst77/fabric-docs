# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-24 19:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/developapps/smartcontract.md:1
msgid "Smart Contract Processing"
msgstr ""

#: ../../source/developapps/smartcontract.md:3
msgid "Audience: Architects, Application and smart contract developers"
msgstr ""

#: ../../source/developapps/smartcontract.md:5
msgid "At the heart of a blockchain network is a smart contract. In PaperNet, the code in the commercial paper smart contract defines the valid states for commercial paper, and the transaction logic that transition a paper from one state to another. In this topic, we're going to show you how to implement a real world smart contract that governs the process of issuing, buying and redeeming commercial paper."
msgstr ""

#: ../../source/developapps/smartcontract.md:12
msgid "We're going to cover:"
msgstr ""

#: ../../source/developapps/smartcontract.md:14
msgid "What is a smart contract and why it's important"
msgstr ""

#: ../../source/developapps/smartcontract.md:15
msgid "How to define a smart contract"
msgstr ""

#: ../../source/developapps/smartcontract.md:16
msgid "How to define a transaction"
msgstr ""

#: ../../source/developapps/smartcontract.md:17
msgid "How to implement a transaction"
msgstr ""

#: ../../source/developapps/smartcontract.md:18
msgid "How to represent a business object in a smart contract"
msgstr ""

#: ../../source/developapps/smartcontract.md:19
msgid "How to store and retrieve an object in the ledger"
msgstr ""

#: ../../source/developapps/smartcontract.md:21
msgid "If you'd like, you can download the sample and even run it locally. It is written in JavaScript and Java, but the logic is quite language independent, so you'll easily be able to see what's going on! (The sample will become available for Go as well.)"
msgstr ""

#: ../../source/developapps/smartcontract.md:26
msgid "Smart Contract"
msgstr ""

#: ../../source/developapps/smartcontract.md:28
msgid "A smart contract defines the different states of a business object and governs the processes that move the object between these different states. Smart contracts are important because they allow architects and smart contract developers to define the key business processes and data that are shared across the different organizations collaborating in a blockchain network."
msgstr ""

#: ../../source/developapps/smartcontract.md:34
msgid "In the PaperNet network, the smart contract is shared by the different network participants, such as MagnetoCorp and DigiBank.  The same version of the smart contract must be used by all applications connected to the network so that they jointly implement the same shared business processes and data."
msgstr ""

#: ../../source/developapps/smartcontract.md:39
msgid "Implementation Languages"
msgstr ""

#: ../../source/developapps/smartcontract.md:41
msgid "There are two runtimes that are supported, the Java Virtual Machine and Node.js. This gives the opportunity to use one of JavaScript, TypeScript, Java or any other language that can run on one of these supported runtimes."
msgstr ""

#: ../../source/developapps/smartcontract.md:45
msgid "In Java and TypeScript, annotations or decorators are used to provide information about the smart contract and it's structure. This allows for a richer development experience --- for example, author information or return types can be enforced. Within JavaScript, conventions must be followed, therefore, there are limitations around what can be determined automatically."
msgstr ""

#: ../../source/developapps/smartcontract.md:51
msgid "Examples here are given in both JavaScript and Java."
msgstr ""

#: ../../source/developapps/smartcontract.md:53
msgid "Contract class"
msgstr ""

#: ../../source/developapps/smartcontract.md:55
msgid "A copy of the PaperNet commercial paper smart contract is contained in a single file. View it with your browser, or open it in your favorite editor if you've downloaded it."
msgstr ""

#: ../../source/developapps/smartcontract.md:57
msgid "papercontract.js - JavaScript version"
msgstr ""

#: ../../source/developapps/smartcontract.md:58
msgid "CommercialPaperContract.java - Java version"
msgstr ""

#: ../../source/developapps/smartcontract.md:61
msgid "You may notice from the file path that this is MagnetoCorp's copy of the smart contract.  MagnetoCorp and DigiBank must agree on the version of the smart contract that they are going to use. For now, it doesn't matter which organization's copy you use, they are all the same."
msgstr ""

#: ../../source/developapps/smartcontract.md:66
msgid "Spend a few moments looking at the overall structure of the smart contract; notice that it's quite short! Towards the top of the file, you'll see that there's a definition for the commercial paper smart contract:"
msgstr ""

#: ../../source/developapps/smartcontract.md:86
msgid "The CommercialPaperContract class contains the transaction definitions for commercial paper -- issue, buy and redeem. It's these transactions that bring commercial papers into existence and move them through their lifecycle. We'll examine these transactions soon, but for now notice for JavaScript, that the CommericalPaperContract extends the Hyperledger Fabric Contract class."
msgstr ""

#: ../../source/developapps/smartcontract.md:93
msgid "With Java, the class must be decorated with the @Contract(...) annotation. This provides the opportunity to supply additional information about the contract, such as license and author. The @Default() annotation indicates that this contract class is the default contract class. Being able to mark a contract class as the default contract class is useful in some smart contracts which have multiple contract classes."
msgstr ""

#: ../../source/developapps/smartcontract.md:98
msgid "If you are using a TypeScript implementation, there are similar @Contract(...) annotations that fulfill the same purpose as in Java."
msgstr ""

#: ../../source/developapps/smartcontract.md:100
msgid "For more information on the available annotations, consult the available API documentation:"
msgstr ""

#: ../../source/developapps/smartcontract.md:101
msgid "API documentation for Java smart contracts"
msgstr ""

#: ../../source/developapps/smartcontract.md:102
msgid "API documentation for Node.js smart contracts"
msgstr ""

#: ../../source/developapps/smartcontract.md:104
msgid "The Fabric contract class is also available for smart contracts written in Go. While we do not discuss the Go contract API in this topic, it uses similar concepts as the API for Java and JavaScript:"
msgstr ""

#: ../../source/developapps/smartcontract.md:105
msgid "API documentation for Go smart contracts"
msgstr ""

#: ../../source/developapps/smartcontract.md:107
msgid "These classes, annotations, and the Context class, were brought into scope earlier:"
msgstr ""

#: ../../source/developapps/smartcontract.md:131
msgid "Our commercial paper contract will use built-in features of these classes, such as automatic method invocation, a per-transaction context, transaction handlers, and class-shared state."
msgstr ""

#: ../../source/developapps/smartcontract.md:136
msgid "Notice also how the JavaScript class constructor uses its superclass to initialize itself with an explicit contract name:"
msgstr ""

#: ../../source/developapps/smartcontract.md:146
msgid "With the Java class, the constructor is blank as the explicit contract name can be specified in the @Contract() annotation. If it's absent, then the name of the class is used."
msgstr ""

#: ../../source/developapps/smartcontract.md:148
msgid "Most importantly, org.papernet.commercialpaper is very descriptive -- this smart contract is the agreed definition of commercial paper for all PaperNet organizations."
msgstr ""

#: ../../source/developapps/smartcontract.md:152
msgid "Usually there will only be one smart contract per file -- contracts tend to have different lifecycles, which makes it sensible to separate them. However, in some cases, multiple smart contracts might provide syntactic help for applications, e.g. EuroBond, DollarBond, YenBond, but essentially provide the same function. In such cases, smart contracts and transactions can be disambiguated."
msgstr ""

#: ../../source/developapps/smartcontract.md:158
msgid "Transaction definition"
msgstr ""

#: ../../source/developapps/smartcontract.md:160
msgid "Within the class, locate the issue method."
msgstr ""

#: ../../source/developapps/smartcontract.md:181
msgid "The Java annotation @Transaction is used to mark this method as a transaction definition; TypeScript has an equivalent annotation."
msgstr ""

#: ../../source/developapps/smartcontract.md:183
msgid "This function is given control whenever this contract is called to issue a commercial paper. Recall how commercial paper 00001 was created with the following transaction:"
msgstr ""

#: ../../source/developapps/smartcontract.md:196
msgid "We've changed the variable names for programming style, but see how these properties map almost directly to the issue method variables."
msgstr ""

#: ../../source/developapps/smartcontract.md:199
msgid "The issue method is automatically given control by the contract whenever an application makes a request to issue a commercial paper. The transaction property values are made available to the method via the corresponding variables. See how an application submits a transaction using the Hyperledger Fabric SDK in the application topic, using a sample application program."
msgstr ""

#: ../../source/developapps/smartcontract.md:206
msgid "You might have noticed an extra variable in the issue definition -- ctx. It's called the transaction context, and it's always first. By default, it maintains both per-contract and per-transaction information relevant to transaction logic. For example, it would contain MagnetoCorp's specified transaction identifier, a MagnetoCorp issuing user's digital certificate, as well as access to the ledger API."
msgstr ""

#: ../../source/developapps/smartcontract.md:213
msgid "See how the smart contract extends the default transaction context by implementing its own createContext() method rather than accepting the default implementation:"
msgstr ""

#: ../../source/developapps/smartcontract.md:237
msgid "This extended context adds a custom property paperList to the defaults:"
msgstr ""

#: ../../source/developapps/smartcontract.md:243
msgid "constructor() { super(); // All papers are held in a list of papers this.paperList = new PaperList(this); }"
msgstr ""

#: ../../source/developapps/smartcontract.md:264
msgid "We'll soon see how ctx.paperList can be subsequently used to help store and retrieve all PaperNet commercial papers."
msgstr ""

#: ../../source/developapps/smartcontract.md:267
msgid "To solidify your understanding of the structure of a smart contract transaction, locate the buy and redeem transaction definitions, and see if you can see how they map to their corresponding commercial paper transactions."
msgstr ""

#: ../../source/developapps/smartcontract.md:271
msgid "The buy transaction:"
msgstr ""

#: ../../source/developapps/smartcontract.md:304
msgid "The redeem transaction:"
msgstr ""

#: ../../source/developapps/smartcontract.md:333
msgid "In both cases, observe the 1:1 correspondence between the commercial paper transaction and the smart contract method definition."
msgstr ""

#: ../../source/developapps/smartcontract.md:336
msgid "All of the JavaScript functions use the async and await keywords which allow JavaScript functions to be treated as if they were synchronous function calls."
msgstr ""

#: ../../source/developapps/smartcontract.md:340
msgid "Transaction logic"
msgstr ""

#: ../../source/developapps/smartcontract.md:342
msgid "Now that you've seen how contracts are structured and transactions are defined, let's focus on the logic within the smart contract."
msgstr ""

#: ../../source/developapps/smartcontract.md:345
msgid "Recall the first issue transaction:"
msgstr ""

#: ../../source/developapps/smartcontract.md:356
msgid "It results in the issue method being passed control:"
msgstr ""

#: ../../source/developapps/smartcontract.md:362
msgid "// create an instance of the paper let paper = CommercialPaper.createInstance(issuer, paperNumber, issueDateTime, maturityDateTime, faceValue);"
msgstr ""

#: ../../source/developapps/smartcontract.md:365
msgid "// Smart contract, rather than paper, moves paper into ISSUED state paper.setIssued();"
msgstr ""

#: ../../source/developapps/smartcontract.md:368
msgid "// Newly issued paper is owned by the issuer paper.setOwner(issuer);"
msgstr ""

#: ../../source/developapps/smartcontract.md:371
msgid "// Add the paper to the list of all similar commercial papers in the ledger world state await ctx.paperList.addPaper(paper);"
msgstr ""

#: ../../source/developapps/smartcontract.md:374
msgid "// Must return a serialized paper to caller of smart contract return paper.toBuffer(); }"
msgstr ""

#: ../../source/developapps/smartcontract.md:415
msgid "The logic is simple: take the transaction input variables, create a new commercial paper paper, add it to the list of all commercial papers using paperList, and return the new commercial paper (serialized as a buffer) as the transaction response."
msgstr ""

#: ../../source/developapps/smartcontract.md:420
msgid "See how paperList is retrieved from the transaction context to provide access to the list of commercial papers. issue(), buy() and redeem() continually re-access ctx.paperList to keep the list of commercial papers up-to-date."
msgstr ""

#: ../../source/developapps/smartcontract.md:424
msgid "The logic for the buy transaction is a little more elaborate:"
msgstr ""

#: ../../source/developapps/smartcontract.md:430
msgid "// Retrieve the current paper using key fields provided let paperKey = CommercialPaper.makeKey([issuer, paperNumber]); let paper = await ctx.paperList.getPaper(paperKey);"
msgstr ""

#: ../../source/developapps/smartcontract.md:434
msgid "// Validate current owner if (paper.getOwner() !== currentOwner) { throw new Error('Paper ' + issuer + paperNumber + ' is not owned by ' + currentOwner); }"
msgstr ""

#: ../../source/developapps/smartcontract.md:439
msgid "// First buy moves state from ISSUED to TRADING if (paper.isIssued()) { paper.setTrading(); }"
msgstr ""

#: ../../source/developapps/smartcontract.md:444
msgid "// Check paper is not already REDEEMED if (paper.isTrading()) { paper.setOwner(newOwner); } else { throw new Error('Paper ' + issuer + paperNumber + ' is not trading. Current state = ' +paper.getCurrentState()); }"
msgstr ""

#: ../../source/developapps/smartcontract.md:451
msgid "// Update the paper await ctx.paperList.updatePaper(paper); return paper.toBuffer(); }"
msgstr ""

#: ../../source/developapps/smartcontract.md:499
msgid "See how the transaction checks currentOwner and that paper is TRADING before changing the owner with paper.setOwner(newOwner). The basic flow is simple though -- check some pre-conditions, set the new owner, update the commercial paper on the ledger, and return the updated commercial paper (serialized as a buffer) as the transaction response."
msgstr ""

#: ../../source/developapps/smartcontract.md:505
msgid "Why don't you see if you can understand the logic for the redeem transaction?"
msgstr ""

#: ../../source/developapps/smartcontract.md:508
msgid "Representing an object"
msgstr ""

#: ../../source/developapps/smartcontract.md:510
msgid "We've seen how to define and implement the issue, buy and redeem transactions using the CommercialPaper and PaperList classes. Let's end this topic by seeing how these classes work."
msgstr ""

#: ../../source/developapps/smartcontract.md:514
msgid "Locate the CommercialPaper class:"
msgstr ""

#: ../../source/developapps/smartcontract.md:538
msgid "This class contains the in-memory representation of a commercial paper state. See how the createInstance method initializes a new commercial paper with the provided parameters:"
msgstr ""

#: ../../source/developapps/smartcontract.md:562
msgid "Recall how this class was used by the issue transaction:"
msgstr ""

#: ../../source/developapps/smartcontract.md:579
msgid "See how every time the issue transaction is called, a new in-memory instance of a commercial paper is created containing the transaction data."
msgstr ""

#: ../../source/developapps/smartcontract.md:582
msgid "A few important points to note:"
msgstr ""

#: ../../source/developapps/smartcontract.md:584
msgid "This is an in-memory representation; we'll see later how it appears on the ledger."
msgstr ""

#: ../../source/developapps/smartcontract.md:588
msgid "The CommercialPaper class extends the State class. State is an application-defined class which creates a common abstraction for a state. All states have a business object class which they represent, a composite key, can be serialized and de-serialized, and so on.  State helps our code be more legible when we are storing more than one business object type on the ledger. Examine the State class in the state.js file."
msgstr ""

#: ../../source/developapps/smartcontract.md:597
msgid "A paper computes its own key when it is created -- this key will be used when the ledger is accessed. The key is formed from a combination of issuer and paperNumber."
msgstr ""

#: ../../source/developapps/smartcontract.md:609
msgid "A paper is moved to the ISSUED state by the transaction, not by the paper class. That's because it's the smart contract that governs the lifecycle state of the paper. For example, an import transaction might create a new set of papers immediately in the TRADING state."
msgstr ""

#: ../../source/developapps/smartcontract.md:614
msgid "The rest of the CommercialPaper class contains simple helper methods:"
msgstr ""

#: ../../source/developapps/smartcontract.md:622
msgid "Recall how methods like this were used by the smart contract to move the commercial paper through its lifecycle. For example, in the redeem transaction we saw:"
msgstr ""

#: ../../source/developapps/smartcontract.md:633
msgid "Access the ledger"
msgstr ""

#: ../../source/developapps/smartcontract.md:635
msgid "Now locate the PaperList class in the paperlist.js file:"
msgstr ""

#: ../../source/developapps/smartcontract.md:642
msgid "This utility class is used to manage all PaperNet commercial papers in Hyperledger Fabric state database. The PaperList data structures are described in more detail in the architecture topic."
msgstr ""

#: ../../source/developapps/smartcontract.md:646
msgid "Like the CommercialPaper class, this class extends an application-defined StateList class which creates a common abstraction for a list of states -- in this case, all the commercial papers in PaperNet."
msgstr ""

#: ../../source/developapps/smartcontract.md:650
msgid "The addPaper() method is a simple veneer over the StateList.addState() method:"
msgstr ""

#: ../../source/developapps/smartcontract.md:659
msgid "You can see in the StateList.js file how the StateList class uses the Fabric API putState() to write the commercial paper as state data in the ledger:"
msgstr ""

#: ../../source/developapps/smartcontract.md:672
msgid "Every piece of state data in a ledger requires these two fundamental elements:"
msgstr ""

#: ../../source/developapps/smartcontract.md:674
msgid "Key: key is formed with createCompositeKey() using a fixed name and the key of state. The name was assigned when the PaperList object was constructed, and state.getSplitKey() determines each state's unique key."
msgstr ""

#: ../../source/developapps/smartcontract.md:679
msgid "Data: data is simply the serialized form of the commercial paper state, created using the State.serialize() utility method. The State class serializes and deserializes data using JSON, and the State's business object class as required, in our case CommercialPaper, again set when the PaperList object was constructed."
msgstr ""

#: ../../source/developapps/smartcontract.md:686
msgid "Notice how a StateList doesn't store anything about an individual state or the total list of states -- it delegates all of that to the Fabric state database. This is an important design pattern -- it reduces the opportunity for ledger MVCC collisions in Hyperledger Fabric."
msgstr ""

#: ../../source/developapps/smartcontract.md:691
msgid "The StateList getState() and updateState() methods work in similar ways:"
msgstr ""

#: ../../source/developapps/smartcontract.md:710
msgid "See how they use the Fabric APIs putState(), getState() and createCompositeKey() to access the ledger. We'll expand this smart contract later to list all commercial papers in paperNet -- what might the method look like to implement this ledger retrieval?"
msgstr ""

#: ../../source/developapps/smartcontract.md:715
msgid "That's it! In this topic you've understood how to implement the smart contract for PaperNet.  You can move to the next sub topic to see how an application calls the smart contract using the Fabric SDK."
msgstr ""

